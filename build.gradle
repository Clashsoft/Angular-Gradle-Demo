plugins {
	id 'java'
	id 'application'
}

repositories {
	jcenter()
}

dependencies {
	implementation 'com.google.guava:guava:28.1-jre'

	testImplementation 'junit:junit:4.12'

	// https://mvnrepository.com/artifact/com.sparkjava/spark-core
	compile group: 'com.sparkjava', name: 'spark-core', version: '2.9.1'
}

application {
	mainClassName = 'de.clashsoft.demo.angulargradle.App'
}

// --------------- Angular ---------------

// adapted from https://blog.softwareforen.de/2018/10/integration-von-spring-und-angular-mit-gradle/

// User Configuration

def appDir = "$projectDir/angular/angular-gradle-demo"
def outputDir = "$appDir/dist/angular-gradle-demo"

def packageManager = guessPackageManager()
def packageManagerArgs = [ 'install', '--shamefully-hoist' ]

// Gradle Glue Code

sourceSets.main.resources.srcDir outputDir

processResources.dependsOn 'buildAngular'

static def isWindows() {
	return System.getProperty('os.name').toUpperCase().contains('WINDOWS')
}

static def guessPackageManager() {
	return readPackageManagerFromNgConfig() + (isWindows() ? '.cmd' : '')
}

static def readPackageManagerFromNgConfig() {
	def process = 'ng config cli.packageManager'.execute()
	def local = process.text
	if (process.exitValue() == 0) {
		return local.trim()
	}
	return 'ng config -g cli.packageManager'.execute().text.trim()
}

tasks.register('buildAngular', Exec) {
	it.group = BasePlugin.BUILD_GROUP
	it.dependsOn 'installAngularDependencies'

	it.workingDir = appDir
	it.inputs.files(fileTree(appDir).exclude('dist', 'node_modules'))
	it.outputs.dir "$appDir/dist"

	if (isWindows()) {
		it.commandLine 'ng.cmd', 'build'
	}
	else {
		it.commandLine 'ng', 'build'
	}
}

tasks.register('installAngularDependencies', Exec) {
	it.group = BasePlugin.BUILD_GROUP

	it.workingDir = appDir

	// up-to-date checks cause problems because node_modules is so huge :(
	// just hope the package manager figures out when it does not need to do anything
	// it.inputs.file "$appDir/package.json"
	// it.outputs.files "$appDir/package-lock.json", "$appDir/yarn.lock", "$appDir/pnpm-lock.yaml" // lock files
	// it.outputs.dir "$appDir/node_modules"

	it.commandLine(packageManager, *packageManagerArgs)
}
